/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package encode;


public class c_matrix_gen 
{

    public static int[][] c_mat(int n)
	{
		int m=n;
		int c_mat[][]=new int[n+m][n];
		int index=3,mul=1,i,j;
        for(i=0; i<n+m; i++)
		{
			for(j=0; j<n; j++)
			{
               if(j==0)
               {
                 c_mat[i][j]=1;
               }
               if(j==1)
               {
                 c_mat[i][j]=index;
               }
               if(j>1)
               {
				 mul=index;
				 for(int k=1;k<j;k++)
                 {
                   mul=gmul(mul,index);
                 }
                 c_mat[i][j]=mul;
               }
            }
            index++;
        }
        //print c matrix
        System.out.println("c matrix print");
        for(i=0; i<n+m; i++)
        {
            for(j=0; j<n; j++)
            {
                System.out.print(c_mat[i][j]);
                System.out.print(" ");
            }
			System.out.print("\n");
        }
        return c_mat;
	}
	//galois field multiplication and addition
	public static int gadd(int a, int b) 
	{
		return a ^ b;
	}
	public static int gmul(int a, int b) 
	{
		int p = 0; /* the product of the multiplication */
		while (b!=0) 
		{
            if ((b & 1)!=0) /* if b is odd, then add the corresponding a to p (final product = sum of all a's corresponding to odd b's) */
                p ^= a; /* since we're in GF(2^m), addition is an XOR */

            if ((a & 0x80)!=0) /* GF modulo: if a >= 128, then it will overflow when shifted left, so reduce */
                a = (a << 1) ^ 0x11b; /* XOR with the primitive polynomial x^8 + x^4 + x^3 + x + 1 -- you can change it but it must be irreducible */
            else
                a <<= 1; /* equivalent to a*2 */
            b >>= 1; /* equivalent to b // 2 */
		}
		return p;
    }
}
